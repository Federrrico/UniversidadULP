/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package universidadejemplo.Vistas;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import universidadejemplo.AccesoADatos.*;
import universidadejemplo.Entidades.Alumno;
import universidadejemplo.Entidades.Inscripcion;
import universidadejemplo.Entidades.Materia;

/**
 *
 * @author Editor
 */
public class FormularioInscripcion extends javax.swing.JInternalFrame {
    
    private DefaultTableModel modelo = new DefaultTableModel();
    
    /**
     * Creates new form FormularioInscripcion
     */
    public FormularioInscripcion() {
        initComponents();
        modelo.addColumn("ID");
        modelo.addColumn("NOMBRE");
        modelo.addColumn("AÑO");
        jTMaterias.setModel(modelo);
        jBInscribir.setEnabled(false);
        jBAnularInscripcion.setEnabled(false);
    }
    
    
    private void borrarFilas(){
        int f = modelo.getRowCount() - 1;
        for (;f >= 0; f--) {
            modelo.removeRow(f);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jCBAlumno = new javax.swing.JComboBox<>();
        jRBMateriasInscriptas = new javax.swing.JRadioButton();
        jRBMateriaNoInscripta = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTMaterias = new javax.swing.JTable();
        jBInscribir = new javax.swing.JButton();
        jBAnularInscripcion = new javax.swing.JButton();
        jBSalir = new javax.swing.JButton();

        setClosable(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Formulario de Inscripcion");

        jLabel2.setText("Seleccione un alumno:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Listado de Materias");

        jCBAlumno.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                jCBAlumnoPopupMenuWillBecomeVisible(evt);
            }
        });

        jRBMateriasInscriptas.setText("Materias Inscriptas");
        jRBMateriasInscriptas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRBMateriasInscriptasMouseClicked(evt);
            }
        });

        jRBMateriaNoInscripta.setText("Materias No Inscriptas");
        jRBMateriaNoInscripta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBMateriaNoInscriptaActionPerformed(evt);
            }
        });

        jTMaterias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTMaterias);

        jBInscribir.setText("Inscribir");
        jBInscribir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBInscribirActionPerformed(evt);
            }
        });

        jBAnularInscripcion.setText("Anular inscripcion");
        jBAnularInscripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAnularInscripcionActionPerformed(evt);
            }
        });

        jBSalir.setText("Salir");
        jBSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel2)
                        .addGap(32, 32, 32)
                        .addComponent(jCBAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRBMateriasInscriptas)
                                .addGap(75, 75, 75)
                                .addComponent(jRBMateriaNoInscripta))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(jLabel1)))
                .addContainerGap(42, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(195, 195, 195))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jBInscribir)
                        .addGap(48, 48, 48)
                        .addComponent(jBAnularInscripcion)
                        .addGap(46, 46, 46)
                        .addComponent(jBSalir)
                        .addGap(84, 84, 84))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jCBAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRBMateriasInscriptas)
                    .addComponent(jRBMateriaNoInscripta))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBInscribir)
                    .addComponent(jBAnularInscripcion)
                    .addComponent(jBSalir))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCBAlumnoPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jCBAlumnoPopupMenuWillBecomeVisible
        AlumnoData a1 = new AlumnoData();
        Alumno al1 = new Alumno();
        jCBAlumno.removeAllItems();
        try {
            for (Alumno alumno : a1.listarAlumnos()) {
                jCBAlumno.addItem(alumno);
            }
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "No hay alumnos cargados en la base de datos");
        }
    }//GEN-LAST:event_jCBAlumnoPopupMenuWillBecomeVisible

    private void jRBMateriaNoInscriptaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBMateriaNoInscriptaActionPerformed
        borrarFilas();
        jRBMateriasInscriptas.setSelected(false);        
        jBInscribir.setEnabled(true);
        jBAnularInscripcion.setEnabled(false);
        jRBMateriaNoInscripta.setSelected(true);
        InscripcionData ida = new InscripcionData();
        try {
            Alumno al1 = (Alumno) jCBAlumno.getSelectedItem();            
            for (Materia materia : ida.obtenerMateriasNoCursadas(al1.getIdAlumno())) {
                modelo.addRow(new Object[]{materia.getIdMateria(), materia.getNombre(), materia.getAño()});
            }
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "No hay materias para inscribir al alumno");
        }
    }//GEN-LAST:event_jRBMateriaNoInscriptaActionPerformed

    private void jRBMateriasInscriptasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRBMateriasInscriptasMouseClicked
        borrarFilas();    
        jBInscribir.setEnabled(false);
        jBAnularInscripcion.setEnabled(true);
        jRBMateriaNoInscripta.setSelected(false);
        InscripcionData ida = new InscripcionData();
        try {
            Alumno al1 = (Alumno) jCBAlumno.getSelectedItem();
            for (Materia materia : ida.obtenerMateriasCursadas(al1.getIdAlumno())) {
                modelo.addRow(new Object[]{materia.getIdMateria(), materia.getNombre(), materia.getAño()});
            }
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "No hay inscripciones del alumno seleccionado");
        }
    }//GEN-LAST:event_jRBMateriasInscriptasMouseClicked

    private void jBSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalirActionPerformed
        dispose();
    }//GEN-LAST:event_jBSalirActionPerformed

    private void jBInscribirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBInscribirActionPerformed
        MateriaData matD = new MateriaData();
        Alumno alu = (Alumno) jCBAlumno.getSelectedItem();
        InscripcionData insData = new InscripcionData();
        try {
            int matId = Integer.parseInt(modelo.getValueAt(jTMaterias.getSelectedRow(), 0).toString());
            insData.guardarInscripcion(new Inscripcion(alu, matD.buscarMateria(matId), 0D));
            modelo.removeRow(jTMaterias.getSelectedRow());
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(this, "Seleccione una opcion para realizar la inscripcion");
        }
    }//GEN-LAST:event_jBInscribirActionPerformed

    private void jBAnularInscripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAnularInscripcionActionPerformed
        InscripcionData insData = new InscripcionData();
        try {
            int matId = Integer.parseInt(modelo.getValueAt(jTMaterias.getSelectedRow(), 0).toString());
            Alumno alu = (Alumno) jCBAlumno.getSelectedItem();
            int aluId = alu.getIdAlumno();
            insData.borrarInscripcion(aluId, matId);
            modelo.removeRow(jTMaterias.getSelectedRow());
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(this, "Seleccione una opcion para eliminar la inscripcion");
        }
    }//GEN-LAST:event_jBAnularInscripcionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAnularInscripcion;
    private javax.swing.JButton jBInscribir;
    private javax.swing.JButton jBSalir;
    private javax.swing.JComboBox<Alumno> jCBAlumno;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JRadioButton jRBMateriaNoInscripta;
    private javax.swing.JRadioButton jRBMateriasInscriptas;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTMaterias;
    // End of variables declaration//GEN-END:variables
}
